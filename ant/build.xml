<?xml version="1.0"?>

<project name="net.sf.mpxj" default="archive" basedir="..">

	<target name="init" depends="init-props,init-dirs">
		<tstamp />
	</target>

	<target name="init-props" description="Initialize properties">
		<tstamp />

		<property name="current.version" value="4.6.0" />
		<property name="ikvm.dir" value="${basedir}/../ikvm-7.2.4630.5" />
		<property name="windows.tools.dir" value="c:/Program Files (x86)/Microsoft SDKs/Windows/v8.1A/bin/NETFX 4.5.1 Tools" />

		<!-- 
		The following two properties are only required if you want to use the xjc target.
   		From experience, it is best to put the XSD file in the root MPXJ dir rather
   		than setting a full path here and in the binding.xjb file 
   		-->
		<property name="mspdi.xsd" value="mspdi_pj14-correct.xsd" />
		<property name="primavera.xsd" value="p6apibo.xsd" />

		<property name="lib.dir" value="${basedir}/lib" />
		<property name="lib.net.dir" value="${basedir}/lib.net" />
		<property name="doc.dir" value="${basedir}/doc/api" />
		<property name="classes.dir" value="${basedir}/classes" />
		<property name="classes.test.dir" value="${basedir}/classes.test" />
		<property name="bak.dir" value="${basedir}/bak" />
		<property name="distribution" value="${basedir}/../mpxj-${current.version}.zip" />
		

		<!-- 
		MPXJ is targeted at Java 1.6, so to ensure that the builds we distribute
		match this, we use this setting. 
		-->
		<property name="target-jvm-version" value="1.6" />

		<property name="poi.jar" value="poi-3.10-PATCHED" />

		<path id="poi.path">
			<pathelement location="${lib.dir}/${poi.jar}.jar" />
		</path>

		<path id="junit.path">
			<pathelement location="${basedir}/junit/junit.jar" />
		</path>

		<property name="poi.classpath" refid="poi.path" />
		<property name="junit.classpath" refid="junit.path" />

		<property name="poi.dll" value="${lib.net.dir}\${poi.jar}.dll" />
		<property name="junit.dll" value="${lib.net.dir}\junit.dll" />
		<property name="mpxj.dll" value="${lib.net.dir}\mpxj.dll" />
		<property name="mpxj-test.dll" value="${lib.net.dir}\mpxj-test.dll" />
		<property name="mpxj-for-vb.dll" value="${lib.net.dir}\mpxj-for-vb.dll" />
		<property name="mpxj-for-csharp.dll" value="${lib.net.dir}\mpxj-for-csharp.dll" />

		<property name="ikvmc.exe" value="${ikvm.dir}/bin/ikvmc.exe" />
		<property name="ikvmstub.exe" value="${ikvm.dir}/bin/ikvmstub.exe" />
		<property name="ikvm.working.dir" value="${basedir}/ikvm.tmp" />
		<available file="${ikvmc.exe}" property="ikvm.available" />

		<property name="tlbexp.exe" value="${windows.tools.dir}/tlbexp.exe" />
		<available file="${tlbexp.exe}" property="tlbexp.available" />
	</target>


	<target name="init-dirs" depends="init-props" description="Initialize directories">
		<mkdir dir="${classes.dir}" />
		<mkdir dir="${classes.test.dir}" />
	</target>

	<target name="xjc" depends="init" description="Rebuild source generated by JAXB">
		<exec executable="xjc" dir="${basedir}">
			<arg line="-classpath ${classes.dir} -d ${basedir}/src -b ${basedir}/binding.xjb -p net.sf.mpxj.mspdi.schema ${mspdi.xsd}" />
		</exec>
		<exec executable="xjc" dir="${basedir}">
			<arg line="-dtd -classpath ${classes.dir} -d ${basedir}/src -p net.sf.mpxj.planner.schema ${basedir}/doc/mrproject-0.6.dtd" />
		</exec>
		<exec executable="xjc" dir="${basedir}">
			<arg line="-classpath ${classes.dir} -d ${basedir}/src -b ${basedir}/pm-binding.xjb -p net.sf.mpxj.primavera.schema ${primavera.xsd}" />
		</exec>
	</target>

	<target name="compile" depends="init,update-maven-pom" description="Compile Everything">
		<javac srcdir="${basedir}/src" destdir="${classes.dir}" classpath="${classpath}:${poi.classpath}" debug="on" source="${target-jvm-version}" target="${target-jvm-version}" includeantruntime="false" excludes="net/sf/mpxj/explorer/**">
			<compilerarg line="-encoding cp1252" />
			<!-- <compilerarg value="-Xlint"/> -->
		</javac>
		<javac srcdir="${basedir}/src.test" destdir="${classes.test.dir}" classpath="${classpath}:${classes.dir}:${poi.classpath}:${junit.classpath}" debug="on" source="${target-jvm-version}" target="${target-jvm-version}" includeantruntime="false">
			<compilerarg line="-encoding cp1252" />
			<!-- <compilerarg value="-Xlint"/> -->
		</javac>		
	</target>

	<target name="update-maven-pom" depends="init-props" description="Ensure the version number in the Maven POM is correct">
		<replaceregexp file="${basedir}/pom.xml"
		               match="&lt;version&gt;.*-SNAPSHOT&lt;/version&gt;"
		               replace="&lt;version&gt;${current.version}-SNAPSHOT&lt;/version&gt;"
		               byline="true"
		/>		
	</target>
		
	<target name="document" depends="init-props" description="Generate documentation">
		<delete dir="${doc.dir}" />
		<mkdir dir="${doc.dir}" />
		<javadoc sourcepath="${basedir}/src" classpath="${classpath}:${poi.classpath}:${junit.classpath}" packagenames="net.sf.mpxj.*" destdir="${doc.dir}" verbose="no" access="public">
		</javadoc>
	</target>

	<target name="jar" depends="compile" description="Create JAR files">
		<jar jarfile="${basedir}/mpxj.jar" basedir="${classes.dir}"/>
		<jar jarfile="${basedir}/mpxj-test.jar" basedir="${classes.test.dir}"/>
	</target>

	<target name="ikvm-compile" depends="init" description="Compile everything reday for use with IKVM" if="ikvm.available">

		<property name="ikvm.src.dir" value="${ikvm.working.dir}/src" />
		<property name="ikvm.src.test.dir" value="${ikvm.working.dir}/src.test" />
		<property name="ikvm.classes.dir" value="${ikvm.working.dir}/classes" />
		<property name="ikvm.classes.test.dir" value="${ikvm.working.dir}/classes.test" />
		<property name="ikvm.lib.dir" value="${ikvm.working.dir}/lib" />


		<delete dir="${ikvm.working.dir}" />
		<mkdir dir="${ikvm.src.dir}" />
		<mkdir dir="${ikvm.src.test.dir}" />
		<mkdir dir="${ikvm.classes.dir}" />
		<mkdir dir="${ikvm.classes.test.dir}" />
		<mkdir dir="${ikvm.lib.dir}" />

		<exec executable="${ikvmstub.exe}" dir="${basedir}">
			<arg line="-out:${ikvm.lib.dir}/mscorlib.jar mscorlib" />
		</exec>

		<copy todir="${ikvm.src.dir}">
			<fileset dir="${basedir}/src" includes="**" />
		</copy>

		<copy todir="${ikvm.src.test.dir}">
			<fileset dir="${basedir}/src.test" includes="**" />
		</copy>
		
		<replace dir="${ikvm.src.dir}" token="public class " value="import cli.System.Runtime.InteropServices.*;${line.separator}@ClassInterfaceAttribute.Annotation(ClassInterfaceType.__Enum.AutoDual)${line.separator}public class ">
			<include name="**/*.java" />
			<exclude name="**/schema/*.java" />
			<exclude name="**/FieldMap.java" />
		</replace>

		<replace dir="${ikvm.src.dir}" token="public final class " value="import cli.System.Runtime.InteropServices.*;${line.separator}@ClassInterfaceAttribute.Annotation(ClassInterfaceType.__Enum.AutoDual)${line.separator}                       public final class ">
			<include name="**/*.java" />
		</replace>

		<replace dir="${ikvm.src.dir}" token="public interface " value="import cli.System.Runtime.InteropServices.*;${line.separator}@ClassInterfaceAttribute.Annotation(ClassInterfaceType.__Enum.AutoDual)${line.separator}                       public interface ">
			<include name="**/*.java" />
		</replace>

		<replace dir="${ikvm.src.dir}" token="class ProjectEntity" value="import cli.System.Runtime.InteropServices.*;${line.separator}@ClassInterfaceAttribute.Annotation(ClassInterfaceType.__Enum.AutoDual)${line.separator}public class ProjectEntity">
			<include name="**/*.java" />
		</replace>

		<replace dir="${ikvm.src.dir}" token="public enum " value="import cli.System.Runtime.InteropServices.*;${line.separator}@ClassInterfaceAttribute.Annotation(ClassInterfaceType.__Enum.AutoDual)${line.separator}public enum ">
			<include name="**/*.java" />
		</replace>

		<javac srcdir="${ikvm.src.dir}" destdir="${ikvm.classes.dir}" classpath="${classpath}:${poi.classpath}:${ikvm.lib.dir}/mscorlib.jar" debug="on" source="${target-jvm-version}" target="${target-jvm-version}" includeantruntime="false" excludes="net/sf/mpxj/explorer/**">
			<compilerarg line="-encoding cp1252" />
		</javac>

		<javac srcdir="${ikvm.src.test.dir}" destdir="${ikvm.classes.test.dir}" classpath="${classpath}:${ikvm.classes.dir}:${poi.classpath}:${junit.classpath}:${ikvm.lib.dir}/mscorlib.jar" debug="on" source="${target-jvm-version}" target="${target-jvm-version}" includeantruntime="false">
			<compilerarg line="-encoding cp1252" />
		</javac>
		
		<jar jarfile="${ikvm.working.dir}/mpxj.jar" basedir="${ikvm.classes.dir}" />
		<jar jarfile="${ikvm.working.dir}/mpxj-test.jar" basedir="${ikvm.classes.test.dir}" />
	</target>

	<target name="dll" depends="ikvm-compile" description="Build .net DLLs" if="ikvm.available">
		<java classname="net.sf.mpxj.ikvm.MapFileGenerator" failonerror="true">
			<arg value="${ikvm.working.dir}/mpxj.jar" />
			<arg value="${ikvm.working.dir}/ikvm-remap-vb.xml" />
			<arg value="False" />
			<classpath>
				<pathelement path="${classpath}" />
				<pathelement path="${ikvm.working.dir}/mpxj.jar" />
				<pathelement location="${junit.classpath}" />
				<pathelement location="${poi.classpath}" />
			</classpath>
		</java>

		<java classname="net.sf.mpxj.ikvm.MapFileGenerator" failonerror="true">
			<arg value="${ikvm.working.dir}/mpxj.jar" />
			<arg value="${ikvm.working.dir}/ikvm-remap-csharp.xml" />
			<arg value="True" />
			<classpath>
				<pathelement path="${classpath}" />
				<pathelement path="${ikvm.working.dir}/mpxj.jar" />
				<pathelement location="${junit.classpath}" />
				<pathelement location="${poi.classpath}" />
			</classpath>
		</java>

		<exec executable="${ikvmc.exe}" dir="${basedir}">
			<arg line="-nowarn:0111 -nowarn:0100 -nowarn:0003 -out:${poi.dll} -target:library -keyfile:${basedir}\mpxj.snk -version:${current.version}.0 ${basedir}\lib\${poi.jar}.jar" />
		</exec>

		<exec executable="${ikvmc.exe}" dir="${basedir}">
			<arg line="-nowarn:0003 -out:${junit.dll} -target:library -keyfile:${basedir}\mpxj.snk -version:${current.version}.0 ${basedir}\junit\junit.jar" />
		</exec>

		<!-- Generate the original unmapped DLL -->
		<exec executable="${ikvmc.exe}" dir="${basedir}">
			<arg line="-nowarn:0003 -out:${mpxj.dll} -target:library -keyfile:${basedir}\mpxj.snk -version:${current.version}.0 -reference:${poi.dll} -reference:mscorlib.dll ${ikvm.working.dir}\mpxj.jar" />
		</exec>

		<exec executable="${ikvmc.exe}" dir="${basedir}">
			<arg line="-nowarn:0003 -out:${mpxj-test.dll} -target:library -keyfile:${basedir}\mpxj.snk -version:${current.version}.0 -reference:${poi.dll} -reference:${mpxj.dll} -reference:${junit.dll} -reference:mscorlib.dll ${ikvm.working.dir}\mpxj-test.jar" />
		</exec>
		
		<!-- Generate a mapped DLL for VB, avoids name clashes due to VB's case insensitivity -->
		<exec executable="${ikvmc.exe}" dir="${basedir}">
			<arg line="-nowarn:0003 -out:${mpxj-for-vb.dll} -target:library -keyfile:${basedir}\mpxj.snk -version:${current.version}.0 -remap:${ikvm.working.dir}/ikvm-remap-vb.xml -reference:${poi.dll} -reference:mscorlib.dll ${ikvm.working.dir}\mpxj.jar" />
		</exec>

		<!-- Generate a mapped DLL for C# and other .Net languages -->
		<exec executable="${ikvmc.exe}" dir="${basedir}">
			<arg line="-nowarn:0003 -out:${mpxj-for-csharp.dll} -target:library -keyfile:${basedir}\mpxj.snk -version:${current.version}.0 -remap:${ikvm.working.dir}/ikvm-remap-csharp.xml -reference:${poi.dll} -reference:mscorlib.dll -reference:system.dll ${ikvm.working.dir}\mpxj.jar" />
		</exec>

		<!-- Export a Type Library (TLB) for each assembly. This step will fail if the assemblies are in the GAC! -->
		<apply executable="${tlbexp.exe}" parallel="false" relative="true" dir="${lib.net.dir}" failifexecutionfails="true">
			<arg value="/nologo"/>
			<arg value="/silence:000017CE"/>
			<arg value="/silence:001311D9"/>
			<arg value="/silence:80131178"/>
			<arg value="/silence:0013117F"/>
			<arg value="/silence:8013117D"/>
			<arg value="/silence:801311B0"/>
			<arg value="/silence:80131172"/>
			<srcfile />
			<fileset dir="${lib.net.dir}">
				<include name="**/*.dll" />
			</fileset>
		</apply>

		<!-- Generate a batch file which installs the assemblies in the GAC -->
		<echo file="${lib.net.dir}\mpxj-gac-install.bat" message="@echo off${line.separator}echo This batch file installs the DLLs required to use MPXJ into the GAC${line.separator}pause${line.separator}"/>
		<apply executable="cmd.exe" parallel="false" relative="true">
			<arg value="/c" />
			<srcfile prefix="echo gacutil /i " />
			<arg value="&gt;&gt; ${lib.net.dir}\mpxj-gac-install.bat" />
			<fileset dir="${lib.net.dir}">
				<include name="*.dll" />
			</fileset>
		</apply>
		<replace file="${lib.net.dir}\mpxj-gac-install.bat" token='" "' value="" />

		<!-- Generate a batch file which removes the assemblies from the GAC -->
		<echo file="${lib.net.dir}\mpxj-gac-uninstall.bat" message="@echo off${line.separator}echo This batch file uninstalls the DLLs required to use MPXJ from the GAC${line.separator}pause${line.separator}"/>
		<apply executable="cmd.exe" parallel="false" relative="true" addsourcefile="false">
			<arg value="/c" />
			<targetfile prefix="echo gacutil /u " />
			<arg value="&gt;&gt; ${lib.net.dir}\mpxj-gac-uninstall.bat" />
			<fileset dir="${lib.net.dir}">
				<include name="**/*.dll" />
			</fileset>
			<mapper type="glob" from="*.dll" to="*"/>
		</apply>
		<replace file="${lib.net.dir}\mpxj-gac-uninstall.bat" token='" "' value="" />

		<!-- Generate a batch file to register the assemblies -->
		<echo file="${lib.net.dir}\mpxj-register-assemblies.bat" message="@echo off${line.separator}echo This batch file registers the .Net assemblies used by MPXJ so that they can be called from COM${line.separator}pause${line.separator}"/>		
		<apply executable="cmd.exe" parallel="false" relative="true">
			<arg value="/c" />
			<srcfile prefix="echo regasm " />				
			<arg value="&gt;&gt; ${lib.net.dir}\mpxj-register-assemblies.bat" />
			<fileset dir="${lib.net.dir}">
				<include name="**/*.dll" />
			</fileset>
		</apply>
		<replace file="${lib.net.dir}\mpxj-register-assemblies.bat" token='" "' value="" />
		
		<!-- Generate a batch file to unregister the assemblies -->
		<echo file="${lib.net.dir}\mpxj-unregister-assemblies.bat" message="@echo off${line.separator}echo This batch file deregisters the .Net assemblies used by MPXJ so that they are no longer available to be called from COM${line.separator}pause${line.separator}"/>
		<apply executable="cmd.exe" parallel="false" relative="true">
			<arg value="/c" />
			<srcfile prefix="echo regasm /u " />
			<arg value="&gt;&gt; ${lib.net.dir}\mpxj-unregister-assemblies.bat" />
			<fileset dir="${lib.net.dir}">
				<include name="**/*.dll" />
			</fileset>
		</apply>
		<replace file="${lib.net.dir}\mpxj-unregister-assemblies.bat" token='" "' value="" />

		<delete dir="${ikvm.working.dir}" />
	</target>

	<target name="archive" depends="jar,dll" description="Create library files">

	</target>

	<target name="distribute" depends="archive,clean-java,clean-dot-net" description="Create distribution">
		<zip zipfile="${distribution}">
			<zipfileset dir="${basedir}" prefix="mpxj" excludes="**/CVSROOT/*,**/CVS/*" />
		</zip>
	</target>

	<target name="clean-temp" depends="init-props" description="Clean up temporary files">
		<delete dir="${bak.dir}" />
		<delete>
			<fileset dir="${basedir}" includes="**/*~" defaultexcludes="no" />
		</delete>
	</target>

	<target name="clean-java" depends="init-props" description="Clean up Java build files">
		<delete dir="${classes.dir}" />
		<delete dir="${classes.test.dir}" />
	</target>

	<target name="clean-dot-net" depends="init-props" description="Clean up .Net build files">
		<delete includeemptydirs="true">
			<fileset dir="${basedir}/src.net" defaultexcludes="false">
				<include name="**/bin/**" />
				<include name="**/obj/**" />
				<include name="**/*.suo" />
				<include name="**/*.user" />
			</fileset>
		</delete>
				
		<delete dir="${ikvm.working.dir}" />
	</target>

	<target name="clean" depends="init-props, clean-temp, clean-java, clean-dot-net" description="Clean up all files">

		<delete dir="${doc.dir}" />
		<delete file="${basedir}/mpxj.jar" />
		
		<delete file="${mpxj.dll}" />
		<delete file="${mpxj-for-csharp.dll}" />
		<delete file="${mpxj-for-vb.dll}" />
		<delete file="${junit.dll}" />
		<delete file="${poi.dll}" />
		
		<delete>
			<fileset dir="${lib.net.dir}">				
				<include name="*.tlb"/>
				<include name="*.bat"/>
			</fileset>
		</delete>			
		
	</target>

	<target name="coverage" depends="archive" description="Code coverage using Emma">
		<property name="emma.dir" value="c:\java\emma-2.0.5312" />

		<path id="emmarun.path">
			<path refid="poi.path" />
			<path refid="junit.path" />
			<pathelement location="${basedir}/mpxj.jar" />
		</path>

		<property name="emmarun.classpath" refid="emmarun.path" />

		<property name="filter" value="-javax.*,-com.*,-org.*,-junit.*,-net.sf.mpxj.mspdi.schema.*" />

		<exec executable="java" dir="${basedir}">
			<arg line="-Xms64m -Xmx512m -Dmpxj.junit.datadir=${basedir}/junit/data -cp ${emma.dir}/lib/emma.jar emmarun -cp ${emmarun.classpath} -r html -sp ${basedir}/src -ix ${filter} junit.textui.TestRunner net.sf.mpxj.junit.MPXJTest" />
		</exec>
	</target>


</project>
